package APCD;

import business.UserBusiness;
import java.awt.Component;
import java.awt.FlowLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SwingUtilities;
import javax.xml.datatype.XMLGregorianCalendar;
import utils.Util;
import xml.ObjectFactory;
import xml.Users;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Toshiba
 */
public class TimeSetting extends javax.swing.JFrame {

       /**
     * Creates new form TimeSetting
     */
    UserBusiness userBusiness = new UserBusiness();

    private TimeSetting() {
        initComponents();
        initForm();
        loadData();
    }

    private static TimeSetting instance;

    public static TimeSetting getInstance() {
        if (instance == null) {
            instance = new TimeSetting();

        }
        instance.loadData();
        return instance;
    }

    private void initForm() {
        Util.initializeForm(this);
        FlowLayout layout = new FlowLayout();
        beforeBreakFastPanel.setLayout(layout);
        breakfastpanel.setLayout(layout);
        lunchPanel.setLayout(layout);
        dinnerPanel.setLayout(layout);
        beforeSleepPanel.setLayout(layout);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jSeparator2 = new javax.swing.JSeparator();
        cancelTime = new javax.swing.JButton();
        saveTime = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        DayLabel = new javax.swing.JLabel();
        timePanel = new javax.swing.JPanel();
        beforeBreakFastPanel = new javax.swing.JPanel();
        breakfastpanel = new javax.swing.JPanel();
        beforeSleepPanel = new javax.swing.JPanel();
        beforebreackfastMeasur = new javax.swing.JLabel();
        breackfastMeasur = new javax.swing.JLabel();
        lunchMeasur = new javax.swing.JLabel();
        dinerMeasur = new javax.swing.JLabel();
        beforeSleepMeasur = new javax.swing.JLabel();
        dinnerPanel = new javax.swing.JPanel();
        lunchPanel = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Setting");
        setPreferredSize(new java.awt.Dimension(402, 655));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TimeSetting.png"))); // NOI18N

        dateChooser.setBackground(new java.awt.Color(255, 255, 255));
        dateChooser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 0)));
        dateChooser.setForeground(new java.awt.Color(153, 0, 0));

        cancelTime.setBackground(new java.awt.Color(153, 0, 0));
        cancelTime.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        cancelTime.setForeground(new java.awt.Color(255, 255, 0));
        cancelTime.setText("Cancel");
        cancelTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTimeActionPerformed(evt);
            }
        });

        saveTime.setBackground(new java.awt.Color(153, 0, 0));
        saveTime.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        saveTime.setForeground(new java.awt.Color(255, 255, 0));
        saveTime.setText("Save");
        saveTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTimeActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/apc diabeticlogo Register.png"))); // NOI18N

        DayLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 22)); // NOI18N
        DayLabel.setForeground(new java.awt.Color(0, 153, 51));
        DayLabel.setText("Day :");

        timePanel.setBackground(new java.awt.Color(255, 255, 255));
        timePanel.setForeground(new java.awt.Color(204, 255, 204));

        beforeBreakFastPanel.setBackground(new java.awt.Color(255, 255, 255));
        beforeBreakFastPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 0)));
        beforeBreakFastPanel.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout beforeBreakFastPanelLayout = new javax.swing.GroupLayout(beforeBreakFastPanel);
        beforeBreakFastPanel.setLayout(beforeBreakFastPanelLayout);
        beforeBreakFastPanelLayout.setHorizontalGroup(
            beforeBreakFastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
        );
        beforeBreakFastPanelLayout.setVerticalGroup(
            beforeBreakFastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        breakfastpanel.setBackground(new java.awt.Color(255, 255, 255));
        breakfastpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
        breakfastpanel.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout breakfastpanelLayout = new javax.swing.GroupLayout(breakfastpanel);
        breakfastpanel.setLayout(breakfastpanelLayout);
        breakfastpanelLayout.setHorizontalGroup(
            breakfastpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
        );
        breakfastpanelLayout.setVerticalGroup(
            breakfastpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        beforeSleepPanel.setBackground(new java.awt.Color(255, 255, 255));
        beforeSleepPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
        beforeSleepPanel.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout beforeSleepPanelLayout = new javax.swing.GroupLayout(beforeSleepPanel);
        beforeSleepPanel.setLayout(beforeSleepPanelLayout);
        beforeSleepPanelLayout.setHorizontalGroup(
            beforeSleepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        beforeSleepPanelLayout.setVerticalGroup(
            beforeSleepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        beforebreackfastMeasur.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        beforebreackfastMeasur.setForeground(new java.awt.Color(0, 153, 51));
        beforebreackfastMeasur.setText("Before Breackfast");

        breackfastMeasur.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        breackfastMeasur.setForeground(new java.awt.Color(0, 153, 51));
        breackfastMeasur.setText("Breackfast");

        lunchMeasur.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        lunchMeasur.setForeground(new java.awt.Color(0, 153, 51));
        lunchMeasur.setText("Lunch");

        dinerMeasur.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        dinerMeasur.setForeground(new java.awt.Color(0, 153, 51));
        dinerMeasur.setText("Diner");

        beforeSleepMeasur.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        beforeSleepMeasur.setForeground(new java.awt.Color(0, 153, 51));
        beforeSleepMeasur.setText("Before Sleep");

        dinnerPanel.setBackground(new java.awt.Color(255, 255, 255));
        dinnerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
        dinnerPanel.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout dinnerPanelLayout = new javax.swing.GroupLayout(dinnerPanel);
        dinnerPanel.setLayout(dinnerPanelLayout);
        dinnerPanelLayout.setHorizontalGroup(
            dinnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
        );
        dinnerPanelLayout.setVerticalGroup(
            dinnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lunchPanel.setBackground(new java.awt.Color(255, 255, 255));
        lunchPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
        lunchPanel.setForeground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout lunchPanelLayout = new javax.swing.GroupLayout(lunchPanel);
        lunchPanel.setLayout(lunchPanelLayout);
        lunchPanelLayout.setHorizontalGroup(
            lunchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
        );
        lunchPanelLayout.setVerticalGroup(
            lunchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(timePanelLayout.createSequentialGroup()
                        .addComponent(beforeSleepMeasur, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(beforeSleepPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(timePanelLayout.createSequentialGroup()
                        .addComponent(dinerMeasur, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dinnerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(timePanelLayout.createSequentialGroup()
                        .addComponent(lunchMeasur, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lunchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(timePanelLayout.createSequentialGroup()
                        .addComponent(breackfastMeasur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(breakfastpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(timePanelLayout.createSequentialGroup()
                        .addComponent(beforebreackfastMeasur, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beforeBreakFastPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(64, 64, 64))
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(beforeBreakFastPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(beforebreackfastMeasur, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(breakfastpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(breackfastMeasur, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lunchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lunchMeasur, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dinnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dinerMeasur, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(beforeSleepPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(beforeSleepMeasur, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(DayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cancelTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DayLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveTime)
                .addGap(1, 1, 1)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelTime)
                .addGap(134, 134, 134))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTimeActionPerformed
        DailyMeasurement dm =  DailyMeasurement.getInstance();
        dm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_cancelTimeActionPerformed

    private void saveTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTimeActionPerformed

        if (userTimeSettings != null)
        {
            if (userChangedAnyValue()) {
                boolean result = Util.displayDialogMessage(this, "you have changed some value(s) do you want to save ?");
                {
                    if (result) {
                        updateCurrentData();
                        showDailyMeasurementForm();
                    } else {
                        showDailyMeasurementForm();
                    }
                }
            } else {

                showDailyMeasurementForm();
            }

        } else {
            constructUserTimeSetting();
            setUserSettingsData();
            saveNewData();
            showDailyMeasurementForm();

        }

    }//GEN-LAST:event_saveTimeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DayLabel;
    private javax.swing.JPanel beforeBreakFastPanel;
    private javax.swing.JLabel beforeSleepMeasur;
    private javax.swing.JPanel beforeSleepPanel;
    private javax.swing.JLabel beforebreackfastMeasur;
    private javax.swing.JLabel breackfastMeasur;
    private javax.swing.JPanel breakfastpanel;
    private javax.swing.JButton cancelTime;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel dinerMeasur;
    private javax.swing.JPanel dinnerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lunchMeasur;
    private javax.swing.JPanel lunchPanel;
    private javax.swing.JButton saveTime;
    private javax.swing.JPanel timePanel;
    // End of variables declaration//GEN-END:variables
    Date currentSelectedDate = currentSelectedDate = new Date();
    Users.UserInfo.UserTimeSetting userTimeSettings = null;

    private void loadData() {
        userTimeSettings = userBusiness.extractToDayUserTimeSetting();
        if (userTimeSettings != null) {
            setFieldsValues(userTimeSettings);
        } else {
            initializeTimePanelWithCurrentTime();
        }
        setDateLabelWithCurrentDate();
    }

     private void setFieldsValues(Users.UserInfo.UserTimeSetting userTimeSettings) {
        Date date = new Date();
        JSpinner tempSpinner = null;
        if (userTimeSettings.getBeforeBreakfast() != null) {
            if (beforeBreakFastPanel.getComponents().length == 0) {
                beforeBreakFastPanel.add(Util.createDatePicker(userTimeSettings.getBeforeBreakfast()));
            } else {
                tempSpinner = (JSpinner) beforeBreakFastPanel.getComponent(0);
                Util.setDatePickerWithTime(tempSpinner, userTimeSettings.getBeforeBreakfast());
            }
        } else {
            breakfastpanel.add(Util.createDatePicker(date));
        }

        if (userTimeSettings.getBreackfast() != null) {
            if (breakfastpanel.getComponents().length == 0) {
                breakfastpanel.add(Util.createDatePicker(userTimeSettings.getBreackfast()));
            } else {
                tempSpinner = (JSpinner) breakfastpanel.getComponent(0);
                Util.setDatePickerWithTime(tempSpinner, userTimeSettings.getBreackfast());
            }
        } else {
            breakfastpanel.add(Util.createDatePicker(date));
        }
        if (userTimeSettings.getLunch() != null) {
            if (lunchPanel.getComponents().length == 0) {
                lunchPanel.add(Util.createDatePicker(userTimeSettings.getLunch()));
            } else {
                tempSpinner = (JSpinner) lunchPanel.getComponent(0);
                Util.setDatePickerWithTime(tempSpinner, userTimeSettings.getLunch());
            }
        } else {
            lunchPanel.add(Util.createDatePicker(date));
        }
        if (userTimeSettings.getDinner() != null) {
            if (dinnerPanel.getComponents().length == 0) {
                dinnerPanel.add(Util.createDatePicker(userTimeSettings.getDinner()));
            } else {
                tempSpinner = (JSpinner) dinnerPanel.getComponent(0);
                Util.setDatePickerWithTime(tempSpinner, userTimeSettings.getDinner());
            }
        } else {
            dinnerPanel.add(Util.createDatePicker(date));
        }
        if (userTimeSettings.getBeforeSleep() != null) {
            if (beforeSleepPanel.getComponents().length == 0) {
                beforeSleepPanel.add(Util.createDatePicker(userTimeSettings.getBeforeSleep()));
            } else {
                tempSpinner = (JSpinner) beforeSleepPanel.getComponent(0);
                Util.setDatePickerWithTime(tempSpinner, userTimeSettings.getBeforeSleep());
            }
        } else {
            beforeSleepPanel.add(Util.createDatePicker(date));
        }
        SwingUtilities.updateComponentTreeUI(this);
    }
    private void initializeTimePanelWithCurrentTime() {

        Date date = new Date();
        for (Component c : timePanel.getComponents()) {
 
            if (c instanceof JPanel) {
                for( int i =0 ; i <  ((JPanel)c).getComponents().length ; i++)
                {
                    ((JPanel)c).remove(i);
                }
                ((JPanel) c).add(Util.createDatePicker(date));
            }
        }
    }

    private void setDateLabelWithCurrentDate() {
        ((JTextField) dateChooser.getDateEditor().getUiComponent()).setText("");
        dateChooser.setDate(new Date());
    }

    private Date getBeforeBreakFastDate() {
        return extractDateFromPanel(beforeBreakFastPanel);
    }

    private Date getBreakfast() {
        return extractDateFromPanel(breakfastpanel);
    }

    private Date getLunch() {
        return extractDateFromPanel(lunchPanel);
    }

    private Date getDinner() {
        return extractDateFromPanel(dinnerPanel);
    }

    private Date getBeforeSleep() {
        return extractDateFromPanel(beforeSleepPanel);
    }

    private Date extractDateFromPanel(JPanel panel) {

        for (Component c : panel.getComponents()) {
            if (c instanceof JSpinner) {
                JSpinner sp = (JSpinner) c;
                JComponent editor = sp.getEditor();
                if (editor instanceof JSpinner.DateEditor) {
                    String dateAsText = ((JSpinner.DateEditor) editor).getTextField().getText();
                    SimpleDateFormat dateFormat = ((JSpinner.DateEditor) editor).getFormat();
                    return Util.constructDateOfFormat(dateAsText, dateFormat);
                }
            }
        }
        return null;
    }

    private boolean userChangedAnyValue() {

        if (!Util.areTimesEqualsEachOthers(userTimeSettings.getBeforeBreakfast(), getBeforeBreakFastDate())) {
            return true;
        }
        if (!Util.areTimesEqualsEachOthers(userTimeSettings.getBreackfast(), getBreakfast())) {
            return true;
        }
        if (!Util.areTimesEqualsEachOthers(userTimeSettings.getLunch(), getLunch())) {
            return true;
        }
        if (!Util.areTimesEqualsEachOthers(userTimeSettings.getDinner(), getDinner())) {
            return true;
        }
        if(!Util.areTimesEqualsEachOthers(userTimeSettings.getBeforeSleep(), getBeforeSleep()))
        {
            return true;
        }
        return false;

    }

    private void showDailyMeasurementForm() {

        Util.hideAndShow(this,  DailyMeasurement.getInstance());
    }

    private void constructUserTimeSetting() {
        userTimeSettings = new ObjectFactory().createUsersUserInfoUserTimeSetting();
        

    }

    private void saveNewData() {
        
        Util.currentLoginUser.getUserTimeSetting().add(userTimeSettings);
        userBusiness.saveUsersBackIntoFile();
    
    }

    private void updateCurrentData() {
        setUserSettingsData();
                userBusiness.saveUsersBackIntoFile();

    }
    
    public void setUserSettingsData()
    {
        userTimeSettings.setUserTimeSettingDate(Util.dateToXMLGregorianCalendar(new Date()));
        userTimeSettings.setBeforeBreakfast(Util.dateToXMLGregorianCalendar(getBeforeBreakFastDate()));
        userTimeSettings.setBreackfast(Util.dateToXMLGregorianCalendar(getBreakfast()));
        userTimeSettings.setLunch(Util.dateToXMLGregorianCalendar(getLunch()));
        userTimeSettings.setDinner(Util.dateToXMLGregorianCalendar(getDinner()));
        userTimeSettings.setBeforeSleep(Util.dateToXMLGregorianCalendar(getBeforeSleep()));
    }
}
